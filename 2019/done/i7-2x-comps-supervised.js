const VM = require("../common/vm");

let prg =
  // `3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5`
  // `3,52,1001,52,-5,52,3,53,1,52,56,54,1007,54,5,55,1005,55,26,1001,54,-5,54,1105,1,12,1,53,54,53,1008,54,0,55,1001,55,1,55,2,53,55,53,4,53,1001,56,-1,56,1005,56,6,99,0,0,0,0,10`
  `3,8,1001,8,10,8,105,1,0,0,21,30,47,64,81,98,179,260,341,422,99999,3,9,1001,9,5,9,4,9,99,3,9,1002,9,5,9,101,4,9,9,102,2,9,9,4,9,99,3,9,102,3,9,9,101,2,9,9,1002,9,3,9,4,9,99,3,9,1001,9,5,9,1002,9,3,9,1001,9,3,9,4,9,99,3,9,1002,9,3,9,101,2,9,9,102,5,9,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,99`
  .split(",").map(e => +e);

// const recombinations = [
  // [9,8,7,6,5], // => 139629729
  // [9,7,8,5,6], // => 18216
  // ];
// const recombinations = [[9,8,7,6,5]];
const recombinations = [];
makeRecombinations(recombinations, [], [5, 6, 7, 8, 9], 5);

const ampNames = ['A', 'B', 'C', 'D', 'E'];

const powers = recombinations.map(phaseSettings => {
  const vms = phaseSettings
    .map((phaseValue, idx) =>
      new VM(ampNames[idx], prg, phaseValue, false));

  let signal = [0];
  let currentVmIdx = 0;
  let currentVm = vms[currentVmIdx];
  while (currentVm.state !== 'halted') {
    signal = currentVm.run(signal);
    const nextVm = vms[currentVmIdx + 1 === vms.length ? 0 : currentVmIdx + 1];
    if (nextVm.state === 'halted') {
      console.log('Stage', phaseSettings, 'result', signal);
      return signal;
    }
    if (++currentVmIdx === vms.length) currentVmIdx = 0;
    currentVm = vms[currentVmIdx];
  }
}).flat();

console.log(powers);
const maxPower = powers.reduce((max, v) => v > max ? v : max);
console.log('ANSWER 7-2:', maxPower);

function makeRecombinations(finalAcc, acc, rest, n) {
  if (n) {
    for (let i = 0; i < rest.length; i++) {
      const others = [...rest];
      others.splice(i, 1);
      makeRecombinations(finalAcc, [...acc, rest[i]], others, n-1);
    }
  } else {
    finalAcc.push(acc);
  }
}
