let input =
  // `12345678`
  // `80871224585914546619083218645595`
  // `19617804207202209144916044189917`
  // `69317163492948606335995924319873`
  ``
  .split("").map(e=>+e);

console.log('Initial', input.join('').slice(0,8));

for (let i = 0; i < 100; i++) {
  input = fft(input);
  console.log('PHASE', i+1, input.join('').slice(0,8));
}

console.log('ANSWER 16-1', input.join('').slice(0,8));

function fft(input) {
  let inLen = input.length;
  const output = [];
  for (let i = 0; i < inLen; i++) {
    const pattern = makePattern(i+1);
    const plen = pattern.length;
    // console.log(i, 'PATTERN', pattern);
    const newV = input.reduce((acc, v, idx) => {
      acc += v * pattern[ (idx + 1) % plen ];
      return acc;
    }, 0);
    const s = newV+'';
    output.push(+s[s.length-1]);
  }
  return output;
}

function makePattern(n) {
  const src = [0, 1, 0, -1];
  return src.map(e => new Array(n).fill(e))
    .flat();
}

console.log();
